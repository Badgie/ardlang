

EXPR : ASSIGN_EXPR
	 | CALC_EXPR
	 | BOOL_EXPR
	 | IVAL
	 | FVAL
	 | IDENT
	 ;

CALC_EXPR : EXPR OP EXPR ;

ASSIGN_EXPR : TYPE IDENT ASSIGN EXPR ;
   
BOOL_EXPR : EXPR BOOL_OP EXPR
		  | TRUE
		  | FALSE
		  ;

OP : OP_PRES_ONE
   | OP_PRES_TWO
   ;
OP_PRES_ONE : MULT | DIV | MOD ;
OP_PRES_TWO : PLUS | MINUS ;
   
BOOL_OP : EQ
		| GRT
		| LESS
		| GRT_EQ
		| LESS_EQ
		| OR
		| AND
		;
		
MOD_OP : INCR
	   | DECR
	   ;

TYPE : INT
	 | STRING
	 | DOUBLE
	 ;

IVAL : DIG ;
FVAL : DIG.DECDIG ;

// tokens
PLUS : '+' ;
MINUS : '-' ;
MULT : '*' ;
DIV : '/' ;
MOD : '%' ;
ASSIGN : '=' ;
INCR : '++' ;
DECR : '--' ;
EQ : '==' ;
GRT : '>' ;
LESS : '<' ;
GRT_EQ : '>=' ;
LESS_EQ : '<=' ;
OR : 'or' ;
AND : 'and' ;
ARRAY_START : '[' ;
ARRAY_END : ']' ;
BLOCK_START : '{' ;
BLOCK_END : '}' ;

// keywords
RETURN : 'return' ;
FOR : 'for' ;
IF : 'if' ;
ELSE : 'else' ;
THEN : 'then' ;
FUNC : 'function' ;

// literals
TRUE : 'true' ;
FALSE : 'false' ;
VOID : 'void' ;
NULL : 'null' ;

// types
INT : 'int' ;
STRING : 'str' ;
DOUBLE : 'dbl' ;

// something
IDENT : [a-zA-Z]([a-zA-Z0-9]*)? ;
DIG : [1-9][0-9]* ;
DECDIG : [0-9][0-9]* ;
